// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum BoosterType {
  BALANCE
}

model ServerStore {
  id      String            @id @default(auto()) @map("_id") @db.ObjectId
  guildId String            @unique
  items   ServerStoreItem[]
}

type ServerStoreItem {
  name        String               @default("")
  cost        Int                  @default(0)
  original    Int                  @default(0)
  available   Boolean              @default(false)
  thumbnail   String               @default("")
  emoji       String               @default("")
  priceChange String               @default("same")
  context     ServerStoreContext[]
}

type ServerStoreContext {
  name     String  @default("")
  required Boolean @default(true)
  style    Int     @default(0)
}

model GlobalBooster {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  type              BoosterType
  expiredAt         DateTime
  multiplier        Float
  purchasedByUserId String
}

type Badge {
  badgeId String
  tierId  String
}

type Achievement {
  name       String    @default("")
  game       Int?      @default(0)
  difficulty Int       @default(0)
  has        Boolean   @default(false)
  achieved   DateTime?
}

model rankedData {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  userId        String       @unique
  matches       Int          @default(0)
  wins          Int          @default(0)
  loses         Int          @default(0)
  streak        Int          @default(0)
  highestStreak Int          @default(0)
  games         RankedGame[]
}

type GameAchievement {
  id   Int
  game Int
  diff Int
  name String
}

model Pets {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique
  pets   Pet[]
}

type Pet {
  id              String        @default(uuid())
  name            String        @default("")
  type            String        @default("cat") // Animal type (cat, dog, bird, etc)
  rarity          Int           @default(0) // Animal rarity type (normal, epic, legendary, mythic)
  multiplier      Float         @default(0)
  multiplierReset Int           @default(0)
  cooldowns       PetCooldown[]
}

type PetCooldown {
  type String
  ends Int
}

model gameAchievements {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  client       String            @unique
  count        Int               @default(1)
  achievements GameAchievement[]
}

model Collectables {
  id      String            @id @default(auto()) @map("_id") @db.ObjectId
  guildId String            @unique
  items   CollectableItem[]
}

type CollectableItem {
  id     String @default(uuid())
  name   String @default("")
  image  String @default("")
  rarity String @default("Normal")
  price  Int    @default(50) // Price is the current price for the item. (automatically changed based on the base cost)
  cost   Int    @default(50) // Cost is the base cost for the item. (does not change)
  weight Int    @default(80)
}

type RankedGame {
  userId String
  win    Boolean
  date   String
}

model UserWallet {
  id               String        @id @default(auto()) @map("_id") @db.ObjectId
  userId           String        @unique
  strikes          Int           @default(0)
  balance          Float         @default(0)
  vault            Float         @default(0)
  messagesSent     Int           @default(0)
  staffCredits     Int           @default(0)
  lemon            Int           @default(0)
  claimed          Int?          @default(0)
  hidden           Boolean       @default(false)
  frameHidden      Boolean       @default(false)
  muteMentions     Boolean       @default(false)
  frameUrl         String        @default("")
  locked           Boolean?      @default(false)
  elo              Int?          @default(1000)
  triviaPoints     Int?          @default(0)
  rankedUID        Int?          @default(0)
  withdrawTimer    Int?          @default(0)
  rankedRegion     Int?          @default(0)
  backgroundHidden Boolean       @default(false)
  backgroundUrl    String?       @default("")
  rig              Int           @default(0)
  yay              Boolean       @default(false)
  pity             Int           @default(0)
  wished           Boolean       @default(false)
  daily            Int           @default(0)
  dailyLimit       Int           @default(150000)
  achievements     Achievement[]
  collectables     Collectable[]
  badges           Badge[]
  rakeback         Rakeback?
  balanceAdded     Int           @default(0)
  balanceRemove    Int           @default(0)
  cooldowns        Cooldown[]
  active           Active?
  dailyStats       DailyStats[]
  roles            Roles[]
}

model DailyCommand {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @unique
  dailyStreak   Int       @default(0)
  dailyTotal    Int       @default(50)
  lastDateClaim DateTime?
}

type Roles {
  type String
  role String
}

model UserStats {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  userId         String         @unique
  hp             Float          @default(100)
  maxHP          Float          @default(100)
  baseAttack     Float          @default(5)
  attackPower    Float          @default(5)
  critChance     Float          @default(0)
  critValue      Float          @default(0)
  defChance      Float          @default(0)
  defValue       Float          @default(0)
  inventory      UserStatsInv[]
  skills         UserSkill[]
  exp            Int            @default(0)
  worldLevel     Int            @default(1)
  highestWL      Int            @default(1)
  equippedWeapon String?
  equippedFlower String?
  equippedPlume  String?
  equippedSands  String?
  equippedGoblet String?
  equippedCirclet String?
  location       String         @default("Liyue Harbor")
  isTravelling   Boolean        @default(false)
}

type UserStatsInv {
  item   String @default("")
  amount Int    @default(0)
}

type UserSkill {
  name  String @default("")
  level Int    @default(1)
}

type Cooldown {
  ends    Int
  command String
}

type Rakeback {
  amount  Int @default(0)
  claimed Int @default(0)
}

type Collectable {
  name  String @default("")
  count Int    @default(0)
}

model GamblingMachine {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  name              String    @unique
  prizePool         Int
  lastClaimedUserId String?
  lastClaimedAt     DateTime?
}

type DailyStats {
  date     DateTime @default(now())
  messages Int      @default(0)
  achieved String[] @default([])
}

type Active {
  last  DateTime
  count Int      @default(0)
}

model bot {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  clientId       String      @unique
  eloLeaderboard String      @default("")
  taxExempt      String[]    @default([])
  colorRoles     ColorRole[]
}

type ColorRole {
  roles     String[] @default([])
  level     Int      @default(0)
  exclusive String   @default("")
}
